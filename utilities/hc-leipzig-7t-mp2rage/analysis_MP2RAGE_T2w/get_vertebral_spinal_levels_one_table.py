# This script generates a figure showing the correspondence between the spinal and vertebral levels.
# It also generates a CSV file with the distances from the PMJ to the middle of each spinal level.

# The script was inspired by script '03a_generate_figure_inter_rater_variablity-PMJ_COV.py':
# https://github.com/ivadomed/model-spinal-rootlets/blob/main/inter-rater_variability/03a_generate_figure_inter_rater_variablity-PMJ_COV.py

import os
import glob
import argparse

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from itertools import product

# Initialize dictionaries
LIST_OF_LEVEL_TYPES = ['rootlets', 'vertebrae']
XOFFSET = {'rootlets': -0.15, 'vertebrae': 0.15}
LEVEL_TYPE_COLOR = {'rootlets': 'red', 'vertebrae': 'green'}
SPINAL_LEVEL_TYPES_TO_LEGEND = {'rootlets': 'Spinal levels', 'vertebrae': 'Vertebral levels'}
FONT_SIZE = 14


def get_parser():
    """
    Function to parse command line arguments.
    :return: command line arguments
    """
    parser = argparse.ArgumentParser(description='Generate a figure showing the correspondence between the spinal'
                                                 'and vertebral levels. The script also computes a distance from the '
                                                 'PMJ to the middle of each spinal level. Results are saved to a CSV '
                                                 'file.', prog=os.path.basename(__file__).strip('.py'))
    parser.add_argument('-i', required=True, type=str, help='Path to the data_processed folder with CSV '
                                                            'files for individual subjects and spinal/vertebral level estimation generated by the '
                                                            'inter-rater_variability/02a_rootlets_vertebrae_spinal_levels.py script.'
                                                            'The figure will be saved to the same folder.')
    parser.add_argument('-participants', required=True, type=str, help='Path to the participants.tsv file.')
    return parser


def generate_figure(df, dir_path):
    """
    Generate a figure showing the correspondence between the spinal and vertebral levels.
    :param df: input dataframe with distances from PMJ for spinal and vertebral levels
    :param dir_path: path to the output folder where the figure will be saved
    """
    subjects = pd.Categorical(df['subject'], ordered=True)
    subject_order = subjects.categories
    num_subjects = len(subject_order)

    # Create a figure for 8 subjects
    fig = plt.figure(figsize=(num_subjects, 6))
    ax = fig.add_subplot()

    for subject, spinal_level_type, level in product(subject_order, LIST_OF_LEVEL_TYPES, df['spinal_level'].unique()):
        one_level_subject = df[(df['subject'] == subject) & (df['spinal_level_type'] == spinal_level_type) &
                               (df['spinal_level'] == level)]

        # Set spinal and vertebral level names to be consistent with anatomical nomenclature (spinal levels: C2, C3,
        # C4, C5, C6, C7, C8, T1; vertebral levels: C1, C2, C3, C4, C5, C6, C7, T1)
        segment = f"C{level}"
        if spinal_level_type == 'vertebrae' and level > 7:
            segment = f"T{level - 7}"
        if spinal_level_type == 'rootlets' and level > 8:
            segment = f"T{level - 8}"
        if one_level_subject.empty:
            continue

        # Get the level start (from PMJ) and height of spinal/vertebral level to plot rectangle
        start = float(one_level_subject['distance_from_pmj_end'])
        height = float(one_level_subject['height'])

        # Get the x position for the subject
        x = subject_order.get_loc(subject) + 1 + XOFFSET[spinal_level_type]

        # Plot the rectangle for the spinal/vertebral level
        ax.add_patch(patches.Rectangle((x, start), 0.25, height, color=LEVEL_TYPE_COLOR[spinal_level_type],
                                       alpha=0.58))

        # Add the spinal/vertebral level name to the plot
        ax.text(x + 0.13, start + 3, segment, horizontalalignment='center', verticalalignment='center', fontsize=10,
                color='black')

        # Add a dashed line to indicate the distance from PMJ to the midpoint of the spinal/vertebral level
        ax.plot([x, x + 0.25], [start + height / 2, start + height / 2], color='black', linewidth=1, alpha=0.5,
                linestyle='dashed')

    # Set axis limits
    ax.set_xlim(0.5, num_subjects + 0.5)
    ax.set_ylim(min(df['distance_from_pmj_end'].min() - 10, df['distance_from_pmj_start'].min()) - 10,
                max(df['distance_from_pmj_end'].max(), df['distance_from_pmj_start'].max()) * 1.1)

    # Set subject names as x-axis labels
    ax.set_xticks(range(1, num_subjects + 1))
    ax.set_xticklabels(subject_order, rotation=25, ha='right')

    # Set y-axis label
    ax.set_ylabel('Distance from PMJ [mm]', fontsize=FONT_SIZE)

    # Set y-axis ticks and limits for the plot
    ax.tick_params(axis='y', labelsize=FONT_SIZE - 2)
    ax.tick_params(axis='x', labelsize=FONT_SIZE - 2)
    ax.set_yticks(range(10, 195, 10))
    ax.set_ylim(190, 10)
    ax.grid(axis='y', alpha=0.2)
    ax.set_axisbelow(True)
    ax.spines['right'].set_visible(False)
    ax.spines['top'].set_visible(False)

    ax.legend(handles=[patches.Patch(color=LEVEL_TYPE_COLOR[spinal_level_type],
                                     label=SPINAL_LEVEL_TYPES_TO_LEGEND[spinal_level_type], alpha=0.5) for
                       spinal_level_type in LIST_OF_LEVEL_TYPES], ncol=1, loc='upper right',
              bbox_to_anchor=(1.40, 1.00), frameon=False, title='Level type',
              fontsize=FONT_SIZE - 2, title_fontsize=FONT_SIZE - 2)

    # Make space for the legend
    plt.subplots_adjust(right=0.75)
    plt.tight_layout()

    # Save the figure
    fname_figure = f'figure_spinal_levels_vs_vertebral_levels_part_8subs.svg'
    fig.savefig(os.path.join(dir_path, fname_figure), dpi=300)
    print(f'Figure saved to {os.path.join(dir_path, fname_figure)}')
    plt.show()


def main():
    parser = get_parser()
    args = parser.parse_args()
    dir_path = os.path.abspath(args.i)

    # Get all the CSV files generated by the 02a_rootlets_to_spinal_levels.py or discs_to_vertebral_levels.py scripts
    csv_files = glob.glob(os.path.join(dir_path, '**', '*pmj_distance*.csv'), recursive=True)

    # Initialize an empty list to store the parsed data
    parsed_data = []

    # Loop across CSV files and aggregate the results into pandas dataframe
    for csv_file in csv_files:
        df_file = pd.read_csv(csv_file)
        parsed_data.append(df_file)

    # Combine list of dataframes into one dataframe
    df = pd.concat(parsed_data)

    # Extract rootlets or vertebrae level type from the fname and add it as a column
    df['spinal_level_type'] = df['fname'].apply(
        lambda x: 'rootlets' if 'rootlets' in x else 'vertebrae'
    )

    # Extract subjectID from the fname and add it as a column
    df['subject'] = df['fname'].apply(lambda x: x.split('_')[0])

    # Extract spinal level (cervical '2-8', thoracic '9') and vertebral level (cervical '1-7', thoracic '8')
    df = df[((df['spinal_level_type'] == 'rootlets') & (df['spinal_level'].isin([2, 3, 4, 5, 6, 7, 8, 9]))) |
            ((df['spinal_level_type'] == 'vertebrae') & (df['spinal_level'].isin([2, 3, 4, 5, 6, 7, 8])))]

    # sort df by subject, spinal level type and spinal level
    df = df.sort_values(by=['subject', 'spinal_level_type', 'spinal_level'])

    # define names of the subjects to plot
    subjects_to_plot = ["sub-barcelona03", "sub-fslAchieva04", "sub-brnoUhb01", "sub-amu02", "sub-mountSinai03",
                        "sub-oxfordFmrib06", "sub-sherbrooke07", "sub-tehranS02"]
    df_to_plot = df[df['subject'].isin(subjects_to_plot)]

    # Generate the figure
    generate_figure(df_to_plot, dir_path)

    # Save dataframe with all subjects to CSV file
    fname_out = os.path.join(dir_path, 'spinal_vs_vertebral_levels.csv')
    df.to_csv(fname_out, index=False)
    print(f'CSV file saved in {fname_out}.')


if __name__ == '__main__':
    main()
